# 10. Анализ и описание архитектурных опций и обоснование выбора. 
Из задания следует, что взаимодействие клиентов с нашей системой осуществляется через сайт, либо мобильное приложение (далее – клиентские приложения). Взаимодействие систем клиентов через API с нашей системой не предусматривается.
Между клиентскими приложениями и системой устанавливаются средства информационной безопасности: сервис Anti-DDoS фильтрации, WAF-сервис (проверка правил защиты от web-атак), fire-wall. Это позволит на более ранних этапах отсечь чрезмерную активность отдельных пользователей и не отказать в обслуживании другим клиентам.
После средств информационной безопасности установлен Ingress, обеспечивающий маршрутизацию запросов к статике и вызова различных методов сервисов системы. Это обеспечивает уменьшение времени прохождения запросов.
В системе выделены следующие домены: заказов, склада, логистики, социальная система и поддержки тренировок. 
К сервисам доменов заказов, социальной системы и поддержки тренировок осуществляется обращение из-вне. Кроме того, они имеют значительное количество сервисов. Как следствие, в них применяется традиционный бизнес-ориентированный API Gateway, размещенный на стороне бэкенда.
Сервисы остальных доменов функционируют во внутренней сети. Складская система содержит несколько сервисов, а значит имеется некоторая инфраструктура, реализующая взаимодействие этих сервисов. Основным сервисом, взаимодействующим с внешними системами, является Сервис склада. Возможно, опрос датчиков на предмет работоспособности проводит некая сторонняя система. Тут более подходит API Gateway типа Service Mesh, реализующий перенаправление трафика к Service Mesh (сквозной функциональности).
Система логистики имеет только один сервис. Реализовывать полноценный шлюз не имеет смысла. Тут отсутствует перенаправление трафика, трансформация данных и пр. Поэтому эта система имеет обычный API.
Заказ в системе заказов обрабатывается последовательно. Поэтому процесс обработки заказов строится на основе бизнес-машины (Camunda). Таким образом выполняется оркестрация заказа и обеспечивается его корректное прохождение через бизнес процесс. Кроме того, такой подход облегчает расследование инцидентов, что важно для системы продаж.
Поскольку взаимодействие системы заказов с системами склада и логистики является асинхронным, а также есть необходимость регулярно обновлять состояние заказа, то используется шина сообщений. На основе схожего взаимодействия социальной системы и системы поддержки тренировок также используется событийная модель с использованием шины сообщений. Взаимодействие остальных сервисов осуществляется на основе стиля rest.
При использовании кэшей применяются паттерны «Чтение со стороны» и «Запись со стороны». При этом проверяется время обновления кэшей. Это позволяет поддерживать кэши в актуальном состоянии и не нагружать базу кэшей логикой по их обновлению. Кэширование выполняется на стороне бэкенда, кроме тренировочной системы. В ней кэширование выполняется и на стороне клиента для обеспечения возможности её использования в случае отсутствия доступа к сети.
Основные ожидаемые случаи отказа и методы решения:
– перегрузка реплики сервиса – использование readyEndPoint, балансировка нагрузки, Rate limiting;
– падение реплики сервиса – Circuit Breaker, Health-check, Timeouts;
– ни одна из реплик сервиса не отвечает – Fallback.
Модель согласованности Causal (данные доступны на всех рабочих серверах, пока клиент общается с одним и тем же сервером). Запросы одного и того же клиента система направляет на одни и те же сервера. Более жесткая модель согласованности приведет к просадке производительности, что не желательно для высоконагруженной системы, более мягкая – к возможной несогласованности данных.
Для хранения данных:
– по заказам используется PostgreSQL как надежная и производительная БД;
– для кэширования Redis как одна из самых быстродействующих;
– для хранения данных мессенджера clickhouse как позволяющая хранить огромное количество записей.
